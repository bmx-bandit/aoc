from functools import cache

NP = {
    "00":["A"],
    "01":["^<A"],
    "02":["^A"],
    "03":[">^A","^>A"],
    "04":["^<^A","^^<A"],
    "05":["^^A"],
    "06":[">>^A","^>^A","^^>A"],
    "07":["^<^^A","^^<^A","^^^<A"],
    "08":["^^^A"],
    "09":[">^^^A","^>^^A","^^>^A","^^^>A"],
    "0A":[">A"],
    "10":["v>A"],
    "11":["A"],
    "12":[">A"],
    "13":[">>A"],
    "14":["^A"],
    "15":[">^A","^>A"],
    "16":[">>^A",">^>A","^>>A"],
    "17":["^^A"],
    "18":[">>^A","^>^A","^^>A"],
    "19":[">>^^A",">^>^A",">^^>A","^>>^A","^>^>A","^^>>A"],
    "1A":[">v>A","v>>A"],
    "20":["vA"],
    "21":["<A"],
    "22":["A"],
    "23":[">A"],
    "24":["<^A","^<A"],
    "25":["^A"],
    "26":[">^A","^>A"],
    "27":["<^^A","^<^A","^^<A"],
    "28":["^^A"],
    "29":[">^^A","^>^A","^^>A"],
    "2A":[">vA","v>A"],
    "30":["<vA","v<A"],
    "31":["<<A"],
    "32":["<A"],
    "33":["A"],
    "34":["<<^A","<^<A","^<<A"],
    "35":["<^A","^<A"],
    "36":["^A"],
    "37":["<<^^A","<^<^A","<^^<A","^<<^A","^<^<A","^^<<A"],
    "38":["<^^A","^<^A","^^<A"],
    "39":["^^A"],
    "3A":["vA"],
    "40":["v>vA","vv>A"],
    "41":["vA"],
    "42":[">vA","v>A"],
    "43":[">>vA",">v>A","v>>A"],
    "44":["A"],
    "45":[">A"],
    "46":[">>A"],
    "47":["^A"],
    "48":[">^A","^>A"],
    "49":[">>^A",">^>A","^>>A"],
    "4A":[">v>vA",">vv>A","v>>vA","v>v>A","vv>>A"],
    "50":["vvA"],
    "51":["<vA","v<A"],
    "52":["vA"],
    "53":[">vA","v>A"],
    "54":["<A"],
    "55":["A"],
    "56":[">A"],
    "57":["<^A","^<A"],
    "58":["^A"],
    "59":[">^A","^>A"],
    "5A":[">vvA","v>vA","vv>A"],
    "60":["<<vA","v<vA","vv<A"],
    "61":["<<vA","<v<A","v<<A"],
    "62":["<vA","v<A"],
    "63":["vA"],
    "64":["<<A"],
    "65":["<A"],
    "66":["A"],
    "67":["<<^A","<^<A","^<<A"],
    "68":["<^A","^<A"],
    "69":["^A"],
    "6A":["vvA"],
    "70":["v>vvA","vv>vA","vvv>A"],
    "71":["vvA"],
    "72":[">vvA","v>vA","vv>A"],
    "73":[">>vvA",">v>vA",">vv>A","v>>vA","v>v>A","vv>>A"],
    "74":["vA"],
    "75":[">vA","v>A"],
    "76":[">>vA",">v>A","v>>A"],
    "77":["A"],
    "78":[">A"],
    "79":[">>A"],
    "7A":[">v>vvA",">vv>vA",">vvv>A","v>>vvA","v>v>vA","v>vv>A","vv>>vA","vv>v>A","vvv>>A"],
    "80":["vvvA"],
    "81":["<<vA","v<vA","vv<A"],
    "82":["vvA"],
    "83":[">vvA","v>vA","vv>A"],
    "84":["<vA","v<A"],
    "85":["vA"],
    "86":[">vA","v>A"],
    "87":["<A"],
    "88":["A"],
    "89":[">A"],
    "8A":[">vvvA","v>vvA","vv>vA","vvv>A"],
    "90":["<vvvA","v<vvA","vv<vA","vvv<A"],
    "91":["<<vvA","<v<vA","<vv<A","v<v<A","v>>vA","vv<<A"],
    "92":["<vvA","v<vA","vv<A"],
    "93":["vvA"],
    "94":["<<vA","<v<A","v<<A"],
    "95":["<vA","v<A"],
    "96":["vA"],
    "97":["<<A"],
    "98":["<A"],
    "99":["A"],
    "9A":["vvvA"],
    "A0":["<A"],
    "A1":["<^<A","^<<A"],
    "A2":["<^A","^<A"],
    "A3":["^A"],
    "A4":["<^<^A","<^^<A","^<<^A","^<^<A","^^<<A"],
    "A5":["<^^A","^<^A","^^<A"],
    "A6":["^^A"],
    "A7":["<^<^^A","<^^<^A","<^^^<A","^<<^^A","^<^<^A","^<^^<A","^^<<^A","^^<^<A","^^^<<A"],
    "A8":["<^^^A","^<^^A","^^<^A","^^^<A"],
    "A9":["^^^A"],
    "AA":["A"]}
    
DP = {
    "<<":["A"],
    "<>":[">>A"],
    "<A":[">>^A",">^>A"],
    "<^":[">^A"],
    "<v":[">A"],
    "><":["<<A"],
    ">>":["A"],
    ">A":["^A"],
    ">^":["<^A","^<A"],
    ">v":["<A"],
    "A<":["<v<A","v<<A"],
    "A>":["vA"],
    "AA":["A"],
    "A^":["<A"],
    "Av":["<vA","v<A"],
    "^<":["v<A"],
    "^>":[">vA","v>A"],
    "^A":[">A"],
    "^^":["A"],
    "^v":["vA"],
    "v<":["<A"],
    "v>":[">A"],
    "vA":[">^A","^>A"],
    "v^":["^A"],
    "vv":["A"]}

@cache
def _shortest(s, dp, np):
    n = 0
    if dp == np:
        return len(s)
    x = "A"+s
    for i in range(len(s)):
        l = []
        for s in DP[x[i]+x[i+1]]:
            l.append(_shortest(s, dp=dp+1, np=np))
        n += min(l)
    return n

def shortest(c, r):
    n = 0
    c = "A"+c
    for i in range(len(c)-1):
        l = []
        for s in NP[c[i]+c[i+1]]:
            l.append(_shortest(s, 1, r+1))
        n += min(l)
    return n

with open("input", "r",) as f:
    codes = [l.strip() for l in f.readlines()]

print(sum([shortest(c, 2) * int(c[:-1]) for c in codes]))
print(sum([shortest(c, 25) * int(c[:-1]) for c in codes]))
